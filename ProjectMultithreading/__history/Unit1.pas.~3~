unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    Button1: TButton;
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

{ Windows.API方法 }
function MyFun(p: Pointer): Integer; stdcall;
{ 工作线程调入函数，stdcall用于多个线程排序以及系统级别调用加此关键字 }
var
  i: Integer;
begin
  for i := 0 to 500000 do
  begin
    with Form1.Canvas do
    begin
      // Lock; // 正在使用, 锁住!
      TextOut(200, 85, IntToStr(i)); { 50和10是坐标X和Y }
      /// Unlock; // 用完了, 解锁!
      // Application.ProcessMessages;
      { 一般用在比较费时的循环中, 它会检查并先处理消息队列中的其他消息.
        但这算不上多线程, 譬如: 运行中你拖动窗体, 循环会暂停下来... }
    end;
  end;
end;

procedure TForm1.Button1Click(Sender: TObject);
{ 工作线程，拖动窗口时计数不会停顿，因为和主线程分开工作了 }
var
  ID: DWORD; { 用于接收线程返回句柄，也可以用DWORD }
begin
  CreateThread(nil, 0, @MyFun, nil, 0, ID); { API创建线程 }
end;

end.
